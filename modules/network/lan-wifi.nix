{ lib, config, ... }:
let
  inherit (config) my-data;
  lan = my-data.lib.getNetwork "lan";

  ownIP = (my-data.lib.getOwnHostInNetwork "lan").ipAddress;

  cctv = my-data.lib.getNetwork "cctv";

  cctvRouterIP = lib.pipe (my-data.lib.getService "cctv-router") [
    (builtins.getAttr "onHost") # -> "uranium"
    # TODO: replace with getHostIpInNetwork and fix config.my-data reference
    (lib.flip my-data.lib.getHostInNetwork "lan")
    (builtins.getAttr "ipAddress")
  ];
in
{
  networking = {
    # Disable autogenerated names
    usePredictableInterfaceNames = false;
    # Systemd-networkd enabled
    useNetworkd = true;
    defaultGateway.interface = "wifi-lan";
  };

  systemd.network.networks = {
    "10-wifi-lan" = {
      enable = true;
      name = "wifi-lan";
      dns = lan.dnsServers;
      # Search domain goes here
      domains = [ lan.domain ];
      routes = [
        {
          routeConfig = {
            Gateway = cctvRouterIP;
            Destination = cctv.prefix;
          };
        }
      ];
      networkConfig = {
        Address = [ "${ownIP}${lan.settings.netmask}" ];
        Gateway = lan.settings.defaultGateway;
        DHCP = "no";
        DNSSEC = "yes";
        DNSOverTLS = "no";
        # Disable ipv6 explicitly
        LinkLocalAddressing = "no";
      };
    };
  };
  # I am not using llmnr in my LAN
  services.resolved.llmnr = "false";

  # Any interface being up should be OK
  systemd.network.wait-online.anyInterface = true;
}
